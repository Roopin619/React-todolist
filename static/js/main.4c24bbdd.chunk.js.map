{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","handleChange","evt","setState","task","target","value","handleSubmit","preventDefault","todo","id","uuidv4","state","completed","addTodo","className","onSubmit","this","htmlFor","type","placeholder","autoComplete","onChange","Component","Todo","toggleForm","isEditing","handleUpdate","updateTodo","handleToggle","toggleTodo","onClick","class","removeTodo","TodoList","prevSt","todos","filter","updatedTask","updatedTodos","map","toggleCompletion","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c24bbdd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { task: \"\" }\n    }\n\n    handleChange = (evt) => {\n        this.setState({ task: evt.target.value });\n    }\n\n    handleSubmit = (evt) => {\n        evt.preventDefault();\n        const todo = { id: uuidv4(), task: this.state.task, completed: false };\n        this.props.addTodo(todo);\n        this.setState({ task: \"\" });\n    }\n\n    render() {\n        return (\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Todo</label>\n                <input\n                    id=\"task\"\n                    type=\"text\"\n                    placeholder=\"New Todo\"\n                    autoComplete=\"off\"\n                    value={this.state.task}\n                    onChange={this.handleChange}\n                >\n                </input>\n                <button>ADD TODO</button>\n            </form>\n        )\n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isEditing: false, task: this.props.task };\n    }\n\n    toggleForm = () => {\n        this.setState({ isEditing: !this.state.isEditing });\n    }\n\n    handleChange = (evt) => {\n        this.setState({ task: evt.target.value });\n    }\n\n    handleUpdate = (evt) => {\n        evt.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({ isEditing: false });\n    }\n\n    handleToggle = () => {\n        this.props.toggleTodo(this.props.id);\n    }\n\n    render() {\n        let result;\n        if (this.state.isEditing) {\n            result = (\n                <div className=\"Todo\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input\n                            type=\"text\"\n                            value={this.state.task}\n                            onChange={this.handleChange}\n                        >\n                        </input>\n                        <button>Save</button>\n                    </form>\n                </div>\n            );\n        } else {\n            result = (\n                <div className=\"Todo\">\n                    <li\n                        className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}\n                        onClick={this.handleToggle}\n                    >\n                        {this.props.task}\n                    </li>\n                    <div className=\"Todo-buttons\">\n                        <button onClick={this.toggleForm}>\n                            <i class=\"fas fa-pen\"></i>\n                        </button>\n                        <button onClick={() => this.props.removeTodo()}>\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n        return result;\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { todos: [] }\n    }\n\n    addTodo = (todo) => {\n        this.setState(prevSt => {\n            return { todos: [...prevSt.todos, todo] }\n        });\n    }\n\n    removeTodo = (id) => {\n        this.setState({ todos: this.state.todos.filter(todo => todo.id !== id) });\n    }\n\n    updateTodo = (id, updatedTask) => {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return {...todo, task: updatedTask}\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos });\n    }\n\n    toggleCompletion = (id) => {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return {...todo, completed: !todo.completed}\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos });\n    }\n\n    render() {\n        let todos = this.state.todos.map(todo => <Todo \n            key = {todo.id}\n            id = {todo.id}\n            task = {todo.task}\n            completed = {todo.completed}\n            removeTodo = {() => this.removeTodo(todo.id)}\n            updateTodo = {this.updateTodo}\n            toggleTodo = {this.toggleCompletion}\n            />)\n        return (\n            <div className=\"TodoList\">\n                <h1>Todo List<span>Get things done, one item at a time.</span></h1>\n                <ul>{todos}</ul>\n                <NewTodoForm addTodo={this.addTodo} />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}